class ColorConverterExtension {
    constructor(runtime) {
        this.runtime = runtime;
    }

    getInfo() {
        return {
            id: 'colorconverter',
            name: 'Color Converter',
            color1: '#EC407A',
            blocks: [
                {
                    opcode: 'convertColor',
                    blockType: Scratch.BlockType.REPORTER,
                    text: 'Convert [FROM_FORMAT] [VALUE] to [TO_FORMAT]',
                    arguments: {
                        FROM_FORMAT: {
                            type: Scratch.ArgumentType.STRING,
                            menu: 'colorFormats',
                            defaultValue: 'hex'
                        },
                        VALUE: {
                            type: Scratch.ArgumentType.STRING,
                            defaultValue: '#EC407A'
                        },
                        TO_FORMAT: {
                            type: Scratch.ArgumentType.STRING,
                            menu: 'colorFormats',
                            defaultValue: 'RGB'
                        }
                    }
                }
            ],
            menus: {
                colorFormats: {
                    acceptReporters: true,
                    items: [
                        'hex', 
                        'RGB', 
                        'HSL', 
                        'CMYK', 
                        'LAB', 
                        'PMS', 
                        'HSV'
                    ]
                }
            }
        };
    }

    convertColor(args) {
        const fromFormat = args.FROM_FORMAT;
        const value = args.VALUE;
        const toFormat = args.TO_FORMAT;

        let r, g, b;

        switch (fromFormat) {
            case 'hex':
                if (!/^#?([0-9A-Fa-f]{6})$/.test(value)) {
                    return 'Invalid hex code';
                }
                const hex = value.replace('#', '');
                r = parseInt(hex.substring(0, 2), 16);
                g = parseInt(hex.substring(2, 4), 16);
                b = parseInt(hex.substring(4, 6), 16);
                break;
            case 'RGB':
                const rgbMatch = value.match(/RGB\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/i);
                if (!rgbMatch) return 'Invalid RGB format';
                r = parseInt(rgbMatch[1]);
                g = parseInt(rgbMatch[2]);
                b = parseInt(rgbMatch[3]);
                break;
            default:
                return 'Unsupported format';
        }

        switch (toFormat) {
            case 'hex':
                return `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1).toUpperCase()}`;
            case 'RGB':
                return `RGB(${r}, ${g}, ${b})`;
            case 'HSL':
                const hsl = this.rgbToHsl(r, g, b);
                return `HSL(${hsl.h}, ${hsl.s}%, ${hsl.l}%)`;
            case 'CMYK':
                const cmyk = this.rgbToCmyk(r, g, b);
                return `CMYK(${cmyk.c}%, ${cmyk.m}%, ${cmyk.y}%, ${cmyk.k}%)`;
            case 'LAB':
                const lab = this.rgbToLab(r, g, b);
                return `LAB(${lab.l}, ${lab.a}, ${lab.b})`;
            case 'PMS':
                return this.rgbToPms(r, g, b);
            case 'HSV':
                const hsv = this.rgbToHsv(r, g, b);
                return `HSV(${hsv.h}, ${hsv.s}%, ${hsv.v}%)`;
            default:
                return 'Unsupported format';
        }
    }

    rgbToHsl(r, g, b) {
        r /= 255, g /= 255, b /= 255;
        const max = Math.max(r, g, b), min = Math.min(r, g, b);
        let h, s, l = (max + min) / 2;

        if (max === min) {
            h = s = 0;
        } else {
            const d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            switch (max) {
                case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                case g: h = (b - r) / d + 2; break;
                case b: h = (r - g) / d + 4; break;
            }
            h /= 6;
        }

        return { h: Math.round(h * 360), s: Math.round(s * 100), l: Math.round(l * 100) };
    }

    rgbToCmyk(r, g, b) {
        const c = 1 - (r / 255);
        const m = 1 - (g / 255);
        const y = 1 - (b / 255);
        const k = Math.min(c, m, y);

        return {
            c: Math.round((c - k) / (1 - k) * 100),
            m: Math.round((m - k) / (1 - k) * 100),
            y: Math.round((y - k) / (1 - k) * 100),
            k: Math.round(k * 100)
        };
    }

    rgbToLab(r, g, b) {
        r = r / 255; g = g / 255; b = b / 255;
        r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
        g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
        b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
        const x = (r * 0.4124 + g * 0.3576 + b * 0.1805) / 0.95047;
        const y = (r * 0.2126 + g * 0.7152 + b * 0.0722) / 1.00000;
        const z = (r * 0.0193 + g * 0.1192 + b * 0.9505) / 1.08883;
        const fx = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + 16/116;
        const fy = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + 16/116;
        const fz = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + 16/116;
        return {
            l: Math.round((116 * fy) - 16),
            a: Math.round(500 * (fx - fy)),
            b: Math.round(200 * (fy - fz))
        };
    }

    rgbToHsv(r, g, b) {
        r /= 255, g /= 255, b /= 255;
        const max = Math.max(r, g, b), min = Math.min(r, g, b);
        let h, s, v = max;
        const d = max - min;
        s = max === 0 ? 0 : d / max;

        if (max === min) {
            h = 0;
        } else {
            switch (max) {
                case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                case g: h = (b - r) / d + 2; break;
                case b: h = (r - g) / d + 4; break;
            }
            h /= 6;
        }

        return { h: Math.round(h * 360), s: Math.round(s * 100), v: Math.round(v * 100) };
    }

    rgbToPms(r, g, b) {
        return 'PMS conversion not available';
    }
}

Scratch.extensions.register(new ColorConverterExtension());

const metadata = {
    extensionName: 'Color Converter',
    extensionId: 'colorconverter',
    author: 'FreddieThePebble',
    description: 'Convert between multiple color formats.',
    tags: ['convert', 'color', 'hex', 'RGB'],
    featured: false
};

Scratch.extensions.registerMetadata(metadata);
